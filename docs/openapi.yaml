openapi: 3.0.0
info:
  title: E-Commerce API
  description: API for user authentication, registration, password management, product management, and token handling.
  version: 1.0.0
  contact:
    name: Your Name
    email: your.email@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080
    description: Local development server
paths:
  /login:
    post:
      summary: User login
      description: Authenticates a user and returns access and refresh tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The user is successfully logged in
                  email:
                    type: string
                    example: user@example.com
                  status:
                    type: integer
                    example: 200
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refresh_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Invalid input fields
        '401':
          description: Invalid username or password
        '500':
          description: Internal server error

  /register:
    post:
      summary: User registration
      description: Registers a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User registered successfully
        '400':
          description: Invalid request body or input fields
        '409':
          description: User already exists
        '500':
          description: Internal server error

  /forgot:
    post:
      summary: Forgot password
      description: Initiates a password reset process by generating a reset token and sending it via email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Forgot'
      responses:
        '200':
          description: If the email is registered, a reset token will be sent.
        '400':
          description: Invalid input fields or request body
        '500':
          description: Internal server error

  /update_pass/{token}:
    post:
      summary: Update password
      description: Updates the user's password using a valid reset token.
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePass'
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: Invalid token or input fields
        '500':
          description: Internal server error

  /refresh:
    post:
      summary: Refresh token
      description: Generates a new access token using a valid refresh token.
      responses:
        '200':
          description: New access token generated successfully
        '401':
          description: Invalid or expired refresh token
        '500':
          description: Internal server error

  /logout:
    post:
      summary: User logout
      description: Invalidates the provided JWT token by adding it to a blacklist.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logged out successfully
        '400':
          description: Token empty
        '500':
          description: Internal server error

  /products:
    get:
      summary: Fetch products
      description: Retrieves a list of products from cache or database.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Products retrieved successfully
        '400':
          description: Failed to fetch product data
        '500':
          description: Internal server error

  /get_all_users:
    get:
      summary: Get all users
      description: Retrieves a list of all users (admins and customers) from the database.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Users retrieved successfully
        '500':
          description: Error retrieving the users data

  /get_admins:
    get:
      summary: Get all admins
      description: Retrieves a list of all users with the ADMIN role.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Admins retrieved successfully
        '500':
          description: Error retrieving the admins data

  /get_customers:
    get:
      summary: Get all customers
      description: Retrieves a list of all users with the USER role.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Customers retrieved successfully
        '500':
          description: Error retrieving the customers data

  /add_product:
    post:
      summary: Add a new product
      description: Allows an admin to add a new product to the database.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product added successfully
        '500':
          description: Error adding the product

  /remove_product:
    delete:
      summary: Remove product
      description: Removes a product from the system by its ID.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            description: ID of the product to be removed
      responses:
        '200':
          description: Product removed successfully
        '400':
          description: Product ID is required
        '404':
          description: Product not found
        '500':
          description: Internal server error

  /update_price:
    put:
      summary: Update product price
      description: Updates the price of an existing product.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ID of the product to update the price for
                price:
                  type: integer
                  description: New price for the product
      responses:
        '200':
          description: Price updated successfully
        '400':
          description: Invalid input or product not found
        '500':
          description: Internal server error

  /add_to_cart:
    post:
      summary: Add item to cart
      description: Adds a product to the user's cart.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: User ID of the person adding the item
                product_id:
                  type: integer
                  description: ID of the product being added
                quantity:
                  type: integer
                  description: Quantity of the product being added
      responses:
        '200':
          description: Item added to cart successfully
        '400':
          description: Invalid input fields or insufficient stock
        '500':
          description: Internal server error

  /remove_item:
    delete:
      summary: Remove item from cart
      description: Removes a product from the user's cart.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: User ID of the person removing the item
                product_id:
                  type: integer
                  description: ID of the product being removed
                quantity:
                  type: integer
                  description: Quantity of the product to remove
      responses:
        '200':
          description: Item removed from cart successfully
        '400':
          description: Invalid input fields or insufficient quantity
        '500':
          description: Internal server error

  /order:
    post:
      summary: Place an order
      description: Places an order for the products in the cart.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: User ID placing the order
                product_id:
                  type: integer
                  description: ID of the product being ordered
                quantity:
                  type: integer
                  description: Quantity of the product being ordered
      responses:
        '200':
          description: Order placed successfully
        '400':
          description: Invalid input fields or insufficient stock
        '500':
          description: Internal server error
components:
  schemas:
    Login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
    Forgot:
      type: object
      properties:
        email:
          type: string
    UpdatePass:
      type: object
      properties:
        password:
          type: string
    Product:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: integer
    CartItem:
      type: object
      properties:
        user_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        price_per_unit:
          type: integer
